/*
This program show cases how use the 2D Graphics which allows
for additianl work with colors, textures and size of lines. 
*/

import java.awt.Graphics;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Color;
import java.awt.BasicStroke;
import java.awt.GradientPaint;
import java.awt.TexturePaint;
import java.awt.Rectangle;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.geom.Arc2D;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;

public class Main extends JPanel {
	
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		Graphics2D g2d = (Graphics2D) g; //changes make g2d the graphics2 veriosn of g, liek (int) double. 
		
		//Draws an ellipse with the graditent of blue and yellow
		g2d.setPaint(new GradientPaint(5,30,Color.BLUE,35,100,Color.YELLOW,true));
		g2d.fill(new Ellipse2D.Double(5,30,65,100));
		
		//Draws a rectangle with the thinckes of 10.0f 
		g2d.setPaint(Color.RED);
		g2d.setStroke(new BasicStroke(10.0f));
		g2d.draw(new Rectangle2D.Double(80,30,65,100));
		
		//A buffer, also called buffer memory, is a portion of a computer's memory that is set aside as a 
		//temporary holding place for data
		BufferedImage buff = new BufferedImage(10,10,BufferedImage.TYPE_INT_RGB);
		//This creates a small rectangle with a patter on it that will be saved in the buffer
		Graphics2D gg = buff.createGraphics();
		gg.setColor(Color.YELLOW);
		gg.drawRect(0, 0, 10, 10);
		gg.setColor(Color.BLACK);
		gg.drawRect(1, 1, 6, 6);
		gg.setColor(Color.BLUE);
		gg.drawRect(1, 1, 3, 3);
		gg.setColor(Color.RED);
		gg.fillRect(4, 4, 3, 3);
		
		//This applies the texture created by gg with the specifed size of 10 by 10.
		g2d.setPaint(new TexturePaint(buff, new Rectangle(10,10)));
		g2d.fill(new RoundRectangle2D.Double(155, 30, 75, 100, 50, 50));
		
		/*
		Draws an arc
		Constant Arc2D.PIE indicates that
		the arc is closed by drawing two lines—one line from the arc’s starting point to the center
		of the bounding rectangle and one line from the center of the bounding rectangle to the
		ending point. Class Arc2D provides two other static constants for specifying how the arc is
		closed. Constant Arc2D.CHORD draws a line from the starting point to the ending point.
		Constant Arc2D.OPEN specifies that the arc should not be closed.
		*/
		g2d.setPaint(Color.WHITE);
		g2d.setStroke(new BasicStroke(6.0f));
		g2d.draw(new Arc2D.Double(240,30,75,100,0,270,Arc2D.PIE));
		
		//Draws a line 
		g2d.setPaint(Color.GREEN);
		g2d.draw(new Line2D.Double(395,30,320,150));
		
		//Draw line using dashes
		float [] dashes = {10}; 
		/*
		declares a one-element float array containing the value 10. This array
		describes the dashes in the dashed line. In this case, each dash will be 10 pixels long. To
		create dashes of different lengths in a pattern, simply provide the length of each dash as an
		element in the array. 
		 */
		g2d.setPaint(Color.YELLOW);
		g2d.setStroke(new BasicStroke(4, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND,10,dashes,0));
		g2d.draw(new Line2D.Double(320,30,395,150));
		
		
		
	}
	
	public static void main(String [] args )
	{
		Main draw = new Main();
		JFrame frame = new JFrame("Fonts # 1");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(500,500);
		frame.add(draw);
		frame.setVisible(true);
	}
}
