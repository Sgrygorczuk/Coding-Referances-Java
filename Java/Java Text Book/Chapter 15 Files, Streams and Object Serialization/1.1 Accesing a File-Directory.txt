/*
 This program shows off how one could use the Path class to gain acess 
 to a file or a directory, and then how you could extract extra information 
 out of the file or directory using the created path or the File class. 
*/

	/*
	There are two basic types of files, binary text files and character text files.
	
	A binary files in in binary format and sets everythign in 1's and 0's, and it iterprets 
	chars as type bytes, int as four bytes, dobule as eight bytes and so on. 
	
	A character files is completely composed of characters and it's size is depeneded on how 
	many characters have been stored in it. 
	
	To open a file java creates an object and it's consturctor works with the System to find and
	open the file. 
	
	Java uses the java.io package and more specifcally java.io.nio for readign files. io (Input Output)
	nio (New Input Output)
	
	Java uses three new classes to interact with files Path which allows us to find our way to the file. 
	Files which give you methods of mannipulationg the file and it's contnet. And DirecotryStream which 
	allows for folder managment. 
	
	 There are two types of path absolute which leads specifically to that file or directory. And relative 
	 which leads you near where the thing is running. 
	*/

import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;

public class Main {
	
	public static void main(String [] args ) throws IOException
	{
	
		Scanner input = new Scanner(System.in);
		
		System.out.println("Enter file or directory name:");
	
		Path path = Paths.get(input.nextLine());
		
		if(Files.exists(path))
		{
			System.out.printf("%n%s exists%n",path.getFileName());
			System.out.printf("%s a directory%n",Files.isDirectory(path) ? "Is" : "Is Not");
			System.out.printf("%s an absolute path%n", path.isAbsolute() ? "Is" : "Is Not");
			System.out.printf("Last modified: %s%n", Files.getLastModifiedTime(path));
			System.out.printf("Size: %s%n", Files.size(path));
			System.out.printf("Path: %s%n", path);
			System.out.printf("Absolute path: %s%n", path.toAbsolutePath());
		}
		if(Files.isDirectory(path))
		{
			System.out.printf("%nDirectory contents:%n");
			
			DirectoryStream<Path> directoryStream = Files.newDirectoryStream(path);
			
			for (Path p : directoryStream)
			{
				System.out.println(p);
			}
		}
		else
		{
			System.out.printf("%s does not exist%n", path);
		}
	}
	
	/*
	Java reads it files sequentailly that means once it hits the end to the file
	it will find a end-of-file marker which will indicate the end of file.  
	 */
}
