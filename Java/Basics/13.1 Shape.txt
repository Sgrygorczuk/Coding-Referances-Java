/*
The way the inheritnace works is that you have two classes, the base class which 
is the one being inheritied from, in this case Shape, and the subclass which is 
inheriting from it. Basically when you inherit from the base class the subclass
creates a base class that the sub class can use all of it's functions and variables.
*/

import java.awt.Color;
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Graphics2D;

/*
Description:
This is the Shape class it will contain the basic functions 
that will be shared amongst  all class that relate to shapes. 
*/
public class Shape extends JPanel {
	
	protected int x; 
	protected int y;
	protected Color Colour;
	
/*
Description:
This is the basic Shape constructor, it takes no 
parameters, however it presets the the x and y
coordinates for the apex of the shape as well as 
the color the shape will be painted. 
*/
	
	public Shape()
	{
		this(0,0,Color.BLACK);
	}

/*
Description:
This is an advanced Shape constructor, it takes
the x and y coordinates that will mark the apex of 
the shape, and it also takes in the color of the shape.
*/
	
	public Shape(int x, int y, Color Colour)
	{
		this.x = x;
		this.y = y;
		this.Colour = Colour; 
	}

/*
Description:
This is an advanced Shape constructor, it takes
the x and y coordinates that will mark the apex of 
the shape, as well it takes in the Color of the shape
using the r,g,b numerical entry. 
*/
	
	public Shape(int x, int y, int r, int g, int b)
	{
		this.x = x;
		this.y = y;
		Color Colour = new Color(r,g,b);
		this.Colour = Colour; 
	}
	
/*
Description:
The getX method takes in no parameters and returns
the value of the x coordinate. 
*/
	
	public int getX ()
	{
		return x;
	}
	
/*
Description:
The getY method takes in no parameters and returns
the value of the y coordinate. 
*/
	
	public int getY ()
	{
		return y;
	}
	
/*
Description:
The getColor method takes in no parameters and returns
the values of the r,g,b of the Color. 
*/
	
	public Color getColor ()
	{
		return Colour; 
	}
	
/*
Description:
The setX method takes in an int as a parameter
and then sets x value equal to it. 
*/

	public void setX (int x)
	{
		this.x = x;
	}

/*
Description:
The setY method takes in an int as a parameter
and then sets y value equal to it. 
*/

	public void setY (int y)
	{
		this.y = y;
	}
	
/*
Description:
The setColor method takes in Color as a parameter
and then sets Colour value equal to it. 
*/
	
	public void setColor (Color Colour)
	{
		this.Colour = Colour; 
	}

/*
Description:
The setColor method takes three parameters all of them int as a parameters,
and sets them as a parameter equal to r,g,b which sets a Colour.
*/
	
	public void setColor (int r, int g, int b)
	{
		Color Colour = new Color(r,g,b);
		this.Colour = Colour;
	}
/*
Description:
The moveTo method takes int two inputs x and y which are the new
location of the shape apex and makes them equal to the object's 
x and y coordinates. 
*/

	public void moveTo (int x, int y)
	{
		this.x = x;
		this.y = y;
	}

/*
Description:
The toString method prints out "Generic Shape"
*/
	
	public String toString()
	{
		return "Generic Shape";
	}

/*
Description:
The paint method takes in the parameter of a Graphic 
and then uses it to paint a line across the diagonal of the frame.
*/
	
	
	public void draw (Graphics g)
	{
	         g.setColor(Colour);
	         g.drawLine(0, 0, 400, 400);
	}
}

